학습내용

1. web 개발 기술 학습
	1. http 프로토콜 기반의 지원 기술
	2. client 단 개발 기술[front]
		- 화면 구성
			html : 구조
				- 서버에 전송하고자 하는 입력 양식(input form)
			css: 보기 좋게 꾸미는 언어
			java script : 브라우저 화면의 동적 처리를 위한 언어
			
	3. server 단 개발 기술[back]
		- java 기반 : ServleT & JSP 스펙
			: servlet
				1. java 기반의 웹처리 스펙
				2. controller
				
			: JSP(Java Server Page)
				1. java 코드보다는 jsp 자체 tag 위주의 화면단 처리 스펙
				2. java의 데이터값을 브라우저 화면에 출력하게 하는 기술
				3. 화면 처리 언어
				4. html과 가장 큰 차이점
					- html 은 자바 코드 활용 불가
				5. jsp는 실제 client 에게 서비스 하게 되는코드는 servlet 으로 변환된 실행 파일로 실행
					- tomcat이 자동 변환
		
		
		
	4. http 프로토콜 기반의 웹 기반(url)의 직접적인 통신은 html or Servlet(controller) or JSP(view)만 가능
		- 일반 순수 자바는 절대 url로 요청 처리 불가
		- controller의 처리 요청 및 결과값을 controller에게 반환하는 핵심 기능 로직 수행					
		- php, asp, django...
		- phthon 기반의 분석
		
		
		
		
		
	4. front + back = full stack
	
	5. 학습 순서
		back end -> front end -> 비동기(java script) -> vue.js -> spring framework -> spring boot(최소 2주 이상)
	
	
2. web 스펙 관리
	= www, w3
	
	
	1. 웹통신 스펙
		- ip와 port기준으로 client과 server가 웹상에서 통신할수 있는 스펙
		- http
		
	2. http protocol 기반의 url
		- 개발시의 구조와 실제 서버에 배포후 서비스 되는 url은 다름
		
		1. http://ip:port/project명/[디렉토리]/file명
		
		http://127.0.0.1:80/step01_basicNewFile.html
		http://localhost:80/step01_basic/NewFile.html
		http://localhost/step01_basic/NewFile.jsp
		http://localhost/step01_basic/encore
		
3. 학습 내용
	1. back end 
		- client 요청 받고 DB와도 소통
		- sql & JDBC or JPA	
		- server 자체의 설정 정보에 db 접속에 대한 제약
			: DB접속 자체의 동시 접속자 수를 제한에 대한 Connection pool 설정
		- Servlet & JSP
		
	2. Front end
		- html or css or java script	
		
	3. web 기반
		- ip,port, client들에게 서비스하고자 하는 로직이 구현된 Application
		- server
		- Web Application Server(WAS)
		- 종류
			아파치 비영리 단체에서 나온 tomcat
			oracle 벤더사 웹로직
			ibm 벤더사의 웹스피어
			....
			
4. 용어
	1. ip, port, domain
*** 2. Web Server = Web Applictation Server(WAS) = Servlet Engine = [Web] Container	
	3. 배포 - 서버에 구현한 로직을 cliant 들에게 서비스하기 위해 셋팅하는 작업
	4. web project = [web] context					
		- http://ip:port/context명/file
		- http://ip:port/project명/file


5. 실습 & 학습단계	
	1. Servlet API
		1. http 특징
		2. Servlet 객체의 life cyle API
		3. server 설정 파일로 Connection 개수 제한
		4. client의 지속적인 상태 정보를 유지하는 기술인 세션트랙킹
			1. 쿠키
			2. 세션
			
	2. JSP
		1. jsp tag 학습
		2. EL(expressin language), JSTL tag에 비중
		
		
---------- 실습 + 학습 -----------
1. http 통신 규약
	1. 통신 방법
		- client가 server에게 요청하는 방식이 정해져 있음
		- HTTP 통신 방식 중 default 방식 - get
		- Servlet & JSP도 get & post 방식 지원
			: 개발자는 요청 방식에 맞게 자동 호출되는메소드를 재정의만 해서 개발
		
		1. get 방식
			- client가 server에게 데이터를  주세요라고 요청시에 주로 사용하는 방식
			- 즐겨찾기용으로 사용
			- 단순 url 로 해당 사이트 접속시에도 사용
			- http://www.daum.net or nttp://www.naver.com 이런 형식 모두다  get으로 간주
			- 입력되는 데이터
				http://ip:port/project/file명?key1=value&key2=value2
		2. post 방식
			- client가 server에 데이터 전송시에 은닉해서 전송하는 방식
			- id/pw 값을 은닉해서 전송
				
				
2. 주요 API
	1. HttpServlet
		1. 부모 클래스
		2. http 통신 스펙 지원하는 클래스
		3. 메소드 상속받아서 재.정.의
		4. 주요 메소드
			service() / doGet() / doPost()
			
		
	2. HttpServletRequest
		1. 요청한 client의 정보를 보유하는 객체
		2. client가 입력한 데이터, client 브라우저 정보, ip 등 확인....
		3. 주요 메소드
			String getParameter()
			String[] getParameterValues() - checkbox
			getRequestDispatcher()
			setCharacterEncoding() - 인코딩 설정
		
	3. HttpServletResponse
		1. 요청한 client 에게만 응답을 책임지는 객체
		2. 출력 객체도 생성해서 브라우저에 응답
		3. 주요 메소드
			setContentType("mimetype;charset=utf-8")
			PrintWriter getWritter()
			sendRedirect()
			
	4. Cookie
	
	
	5. HttpSession
		HttpSession session = request.getSession();
		
	6. ServletContext // servlet과 session은 공유 안함
		1. 서버에 배포된 project 즉 context당 무조건 무조건 하나씩 생성되는 독특한 객체
		
		2. 생성 시점?
			1. 서버 실행 직후 안전한 웹 서비스가 가능함을 인지한 직후
			2. client가 요청 전에도 공유해야 하는 자원을 초기화 가능
			
			
		3. 필요성?
			해당 web project를 이용하는 모든 고객이 공유하는 자원을 제공하고자 할 때 ServletContext 에 저장해서 활용
		
3. servlet 특징
	1. JSP도 결국에 Servlet
	2. server(web container=web server=web application server=servlet engine) 내부에서
	하나의 Process로 간주
		- 요청하는 client수와 무관하게 servlet 객체는 무조건무조건 server 내부에 하나
		- 서로 다른 servlet인 경우 개별적으로 생성
		- 
		
	3. doGet() or doPost() 와 같은 서비스 메소드들은 client요청 수만큼 thread로 실행되어 처리
	
	
4. web page 이동 기술
	1. html -> servlet
		1. form submit 버튼
		2. 링크
		3. 일반 button tag
		
	2. html -> JSP
	
	3. html -> html
		1. two.html로 이동하는 html link tag <a href="이동 url">화면에 보이는 부분</a>
		2. <button onclick="location.href='이동page'">보이는문구</button>
		
		
		
		
		
	4. Servlet -> Servlet
		1. survlet page 이동 api
		* 주소값의 변천사
			1-1. forward
				- 데이터가 유지되는상태로 서로 다른  servlet 이라 하더라도 마치 하나의 servlet 처럼 간주
				- 하나의 servlet 처럼 간주
			
			1-2. redirect
				- 각자 서로 다른 servlet 으로 간주
		2. 요청 방식 review : get & post
			http://ip:port/project명/file.html
			http://ip:port/project명/file.jsp
			http://ip:port/project명/servlet
			http://ip:port/project명/file명.html?k1=v1&k2=v2...
			? 뒷단이 client인에 발생되는 데이터 : web query string
			
		
		
			1. get
				1. url 기본 방식
				2. client가 전송하는 데이터가 주소줄에 open
 				3. 보안이 고려 데이터
 				4. 즐겨찾기 용
 				5. http://ip:port/project명/file명.html?k1=v1&k2=v2..
 			2. post
 				1. 코드로 mathod="post"필수
 				2. 보안 미 고려 데이터
 				3. 	
				
	5. Servlet -> html
	
	6. Servlet -> JSP
	
	7. JSP -> HTML
		1. jsp 이동  tag
		
	8. JSP -> Servlet
		1. jsp 이동  tag
	
	9. JSP -> JSP
		1. jsp 이동  tag
	
5. client의 지속적인 상태 유지를 위한 기술
	1. http 특징
		- 비연결 지향형
	2. 로그인 ~ 로그아웃까지의 모든 인증으로 인한 상태유지 로직은 코드로 개발
	3. 방법
		1. 쿠키
			1. client 시스템이 상태유지하고 하는 값을 저장
			2. 데이터 타입 : 문자열만 가능
			3. 쿠키 정보는 client 가 강제 삭제도 가능
			4. 개발 코드
				쿠키 생성
					new Cookie(별칭, 데이터)
				쿠키의 잔존 시간 설정
					setMaxAge(초단위)
				client 시스템에 저장
					addCookie()
					
				--> 이동된 web page(servlet or jsp)
					client 시스템에서 쿠키획득 및 활용
					Cookie [] c = request.getCookie()
					getName("쿠키의 별칭")
					getValue()
					
				쿠키 정보 삭제 방법
					1. client	
		2. 세션
			1. server 시스템이 상태 유지하고 하는 값을 저장
			2. 데이터 : 제한없이 객체 타입은 다 저장 가능
			3. 개발 방식
				1단계 : HttpSesion 객체 생성
				2단계 : Session에 데이터 저장
				3단계 : 화면이동
				4단계 : HttpSession 재사용해서 획득
					HttpSession 변수 = request.getSession()
				5단계 : HttpSession 데이터 획득
					변수.getAttribute(key)
				6단계 : 해당 user만의 고유한 세션 객체 삭제 or 세션에 저장된 데이터(Attribute) 삭제
					- 데이터 하나만 삭제
					변수.removeAttribute(key)			
					- 세션 객체 자체를 무효화
						변수.invalidate()
				
6. DB system 다운 방지를 위한 처리 기술
	1. DB의 동시접속자 수를 제어하는 기술
	2. 개념
		Connecion 개수를 조절
	3. 적용 방식
		1. 처음부터 Connection 객체 생성해서 대기상태로 유지
		2. client가 최대 개수까지 접속자들에 한해서 생성 후 접속 해제하면 Connection 삭제가 아니라 Connection들만 저장된 별도의 메모리에 반환
			새로운 Client는 재사용 개념				
		3. web Application Serever와 DB Server 구분
			단, Connection 개수 제한은 Web Server(WAS)의 설정 파일로 관리		
	
7. web project 자체의 설정
	1. 설정 파일 : WEB-INF/web.xml
	2. Deployment Descriptor[DD] 라고 명칭 부여
	3. 설정 정보들
		1. url에 file명 기술 없이도 자동 실행되는 intro 파일명 명시
			  <welcome-file-list>
    			<welcome-file>index.html</welcome-file>
  			</welcome-file-list>
  		
  		2. Connection Pool 설정
  			1. 개념은 모든 server에 동일하게 반영
  			2. 단, 서버마다 설정 방식이 다름(벤더별 상이함)
  			3. 적용 방식
  				1. DB + 접속자 수 제어의 설정 정보
  						META-INF/context.xml
  				2. 프로젝트
  					web.xml 에 설정
  					모든 웹프로젝트별 동일한 방식
  				3. 자바소스에서 JNDI 라는 이름(별칭)으로 자원활용하는 스펙	
  					모든 소스에 동일한 표준화된 코드
8. JSP
	1. Java Server Page 의 약어
	2. 컨셉
		- servlet만으로 view 개발의 한계
		- 화면단엔 tag 위주로 개발 단 자바 코드도 소화 할 수 없는 스펙
	3. 확장자 : *.jsp
	4. url
		http://ip:port/context/../file명.jsp
	5. 개발은 쉽다
		- tag 위주로만 개발
	6. 컴파일 및 실행시 발생되는 에러는 처리가 어렵다.
		- jsp는 첫번째 client호출시 web container가 server으로 자동으로 변환
			a.jsp -> 서버에 배포 -> client 요청 -> a?.java라는 이름으로 servlet 변환 -> 컴파일 -> 로딩 -> 실행							
	7. tag
		1. scripting tag
			1. 5가지
			2. 문법
				<%가변적 표현 ...%>
				
			2-1. 지시자	
				1. jsp intro 설정 tag	 
				<%@ page 지시자 tag%>
				<%@ page language="java" contentType="text/html; charset=UTF-8"
   				 pageEncoding="UTF-8" import="dept.model.domain.DeptDTO,java.util.ArrayList"
   				 	-- java.lang & servlet api 제외하고 import
   				 	%>
 				2. jstl tag 즉 외부에서 tag틀 조합해서 사용 가능
 					<%! taglib tag종류 구분을 위한 고유정보%>
 					
 				3. 화면 분할  시 사용 가능한 지시자
 					-외부 jsp나 html을 현 jsp에게 포함해서 하나처럼 표현
 					<%@ include %>		
			2-2. jsp 주석
				<%-- --%> : client 브라우저에 전송되지 않는 보안을 고려한 주석
				참고 : html tag 주석
					<!-- --> : client 브라우저에 전송해서 소스보기로 확인 가능
					
			2-3. 출력만 담당
				1. experssion tag
				2. <%= %>
				
			2-4. 멤버 변수 선언 또는 멤버 메소드 구현할 수 있는 tag - 선언자
				1. jsp는 servlet으로 변환
				2. <%! %>
				
			2-5. <% %>
				1. 스클립들릿
				2. 모든 자바 코드 다 개발 가능한 tag
								
			
		2. jsp action
			1. <jsp:다양한이름 /> or <jsp:다양한이름></jsp:다양한이름>
			2. 종류
				1. 객체 생성
					<jsp:usebean />	
				2. forward로 page이동
					 <jsp:forward />	
				3.forward tag 하위에 내장될수있으면서 query string 조합하는 tag
					parameter 값 표현 tag
					<jsp:param name="별칭", value값)	
			-- 1+2 : sun에서 제시한 표준 jsp tag
			-- 3+4 : jsp 소스에 자바 코드를 최소화하는 즉 view는 view단에 개발하고자 하는 tag
			
		
		3. EL
			1. 매우 중요
				url로 인해 발생되는 경로의 혼동을 방지할수 있는 기술
				${pageContext.request.contextPath} - context명까지의 경로를 통일화
			2. 주 목적
				브라우저화면에 결과 출력
				java 코드로 이 표현식만으로 데이털ㄹ 화면에 출력	
			3. 문법
				${}
			4. 연산식 표현 가능
			5. request/session/application에 저장된 자바 객체들을 화면에 출력
				순수 servlet 코드인 경우
				request.setAttribute("key", value)
				타입 변수 = (타입)request.getAttribute("key")
				EL로 데이터 출력
				request -> requestScope
				session -> sessionScope
				application -> applicationScope	
					
		4. JSTL			
			1. jsp에 순수자바 코드를 최소화
			2. EL tag 와 혼용해서 사용해야 하는 구조
			3. 외부 library 사용하는 관점이기 때문에 반드시 library 셋팅 필수
			4. jsp 파일에 jstl 사용하겠다는 선언 필수 - tag lib 지시자<% taglib %>
			5. 대표적인 tag
				1. 조건
					단일조건식
						if
					다중조건식
						choose/when/...
				2. 반복	
					forEach
			
	8. 내장 객체	
		1. client 가 요청시 해당 jsp 실행 관련된 내장 객체가 자동 생성
		2. 종류
			1. request - HttpServletRequest
			2. session - HttpSession	
			3. out -PrintWriter
			4. response - HttpServletResponse
			5. application - ServletContext		
			...				